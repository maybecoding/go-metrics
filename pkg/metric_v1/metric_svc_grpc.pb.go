// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: metric_svc.proto

package metric_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsV1Client is the client API for MetricsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsV1Client interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetricList, error)
	SetAll(ctx context.Context, in *MetricList, opts ...grpc.CallOption) (*Empty, error)
	Set(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *MetricHeader, opts ...grpc.CallOption) (*Metric, error)
}

type metricsV1Client struct {
	cc grpc.ClientConnInterface
}

func NewMetricsV1Client(cc grpc.ClientConnInterface) MetricsV1Client {
	return &metricsV1Client{cc}
}

func (c *metricsV1Client) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetricList, error) {
	out := new(MetricList)
	err := c.cc.Invoke(ctx, "/proto_v1.MetricsV1/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsV1Client) SetAll(ctx context.Context, in *MetricList, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto_v1.MetricsV1/SetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsV1Client) Set(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto_v1.MetricsV1/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsV1Client) Get(ctx context.Context, in *MetricHeader, opts ...grpc.CallOption) (*Metric, error) {
	out := new(Metric)
	err := c.cc.Invoke(ctx, "/proto_v1.MetricsV1/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsV1Server is the server API for MetricsV1 service.
// All implementations must embed UnimplementedMetricsV1Server
// for forward compatibility
type MetricsV1Server interface {
	List(context.Context, *Empty) (*MetricList, error)
	SetAll(context.Context, *MetricList) (*Empty, error)
	Set(context.Context, *Metric) (*Empty, error)
	Get(context.Context, *MetricHeader) (*Metric, error)
	mustEmbedUnimplementedMetricsV1Server()
}

// UnimplementedMetricsV1Server must be embedded to have forward compatible implementations.
type UnimplementedMetricsV1Server struct {
}

func (UnimplementedMetricsV1Server) List(context.Context, *Empty) (*MetricList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMetricsV1Server) SetAll(context.Context, *MetricList) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAll not implemented")
}
func (UnimplementedMetricsV1Server) Set(context.Context, *Metric) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedMetricsV1Server) Get(context.Context, *MetricHeader) (*Metric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMetricsV1Server) mustEmbedUnimplementedMetricsV1Server() {}

// UnsafeMetricsV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsV1Server will
// result in compilation errors.
type UnsafeMetricsV1Server interface {
	mustEmbedUnimplementedMetricsV1Server()
}

func RegisterMetricsV1Server(s grpc.ServiceRegistrar, srv MetricsV1Server) {
	s.RegisterService(&MetricsV1_ServiceDesc, srv)
}

func _MetricsV1_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsV1Server).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_v1.MetricsV1/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsV1Server).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsV1_SetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsV1Server).SetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_v1.MetricsV1/SetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsV1Server).SetAll(ctx, req.(*MetricList))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsV1_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsV1Server).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_v1.MetricsV1/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsV1Server).Set(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_v1.MetricsV1/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsV1Server).Get(ctx, req.(*MetricHeader))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsV1_ServiceDesc is the grpc.ServiceDesc for MetricsV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_v1.MetricsV1",
	HandlerType: (*MetricsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MetricsV1_List_Handler,
		},
		{
			MethodName: "SetAll",
			Handler:    _MetricsV1_SetAll_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _MetricsV1_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MetricsV1_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metric_svc.proto",
}
